{"ast":null,"code":"var _jsxFileName = \"/Users/carpenters/portfolio/new-portfolio/src/app/components/App.js\";\nimport React, { Component } from 'react'; // import { Route, Switch } from 'react-router-dom';\n\nimport Scroll from 'react-scroll';\nimport Modal from 'react-modal';\nimport ParticleNodes from './interactiveNodes/particles.js';\nimport '../styles/index.css';\nimport ProjectsData from './Projects/Projects-Data.js';\nimport Projects from './Projects/Projects.js';\nimport ProjectDetails from './Projects/ProjectDetails.js';\nimport Resume from './Resume/Resume.js';\nimport About from './About/About.js';\nimport Footer from './Footer/Footer.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalOpen: false,\n      projectToDisplay: '',\n      imageIsReady: false\n    }; // Doesnt allow aria to read background when modal is open\n\n    Modal.setAppElement('body');\n    this.toggleModal = this.toggleModal.bind(this);\n    this.scrollToTop = this.scrollToTop.bind(this);\n  }\n\n  scrollToAbout() {\n    Scroll.scroller.scrollTo('about', {\n      durcation: 1000,\n      delay: 250,\n      smooth: true\n    });\n  }\n\n  scrollToTop() {\n    Scroll.animateScroll.scrollToTop();\n  }\n\n  projectDetails() {\n    if (this.state.projectToDisplay === 'resume') {\n      return React.createElement(Modal, {\n        className: \"project-modal\",\n        isOpen: this.state.modalOpen,\n        onRequestClose: this.toggleModal,\n        contentLabel: \"Resume\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Resume, {\n        toggleModal: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    } else {\n      const projectToDisplay = ProjectsData.find(project => project.title === this.state.projectToDisplay);\n      return React.createElement(Modal, {\n        className: \"project-modal\",\n        isOpen: this.state.modalOpen,\n        onRequestClose: this.toggleModal,\n        contentLabel: \"Project Details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(ProjectDetails, Object.assign({}, projectToDisplay, {\n        toggleModal: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })));\n    }\n  }\n\n  toggleModal(name) {\n    if (!this.state.modalOpen) {\n      this.setState({\n        modalOpen: true,\n        projectToDisplay: name\n      });\n    } else {\n      this.setState({\n        modalOpen: false,\n        projectToDisplay: ''\n      });\n    }\n  }\n\n  preventTextSelectionOnDblClick(e) {\n    if (e.detail > 1) {\n      e.preventDefault();\n    }\n  }\n\n  componentDidMount() {\n    const img = new Image();\n    img.src = require('../styles/images/new-background-trees1.png'); // by setting an src, you trigger browser download\n\n    img.onload = () => {\n      // when it finishes loading, update the component state\n      this.setState({\n        imageIsReady: true\n      });\n    };\n  }\n\n  render() {\n    const imageIsReady = this.state.imageIsReady;\n\n    if (!imageIsReady) {\n      return React.createElement(\"div\", {\n        className: \"default-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }); // or just return null if you want nothing to be rendered.\n    } else {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        onMouseDown: e => this.preventTextSelectionOnDblClick(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(ParticleNodes, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: require('../styles/images/new-background-trees1.png'),\n        alt: \"black sillouette of pine trees as foreground\",\n        className: \"landing-trees\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), this.projectDetails(), React.createElement(\"section\", {\n        id: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \" adam\", React.createElement(\"span\", {\n        id: \"period\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \".\"), \"carpenter \"), React.createElement(\"h2\", {\n        id: \"title\",\n        className: \"employment-field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"S\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"o\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"f\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"t\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"w\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"a\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"r\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"e\"), \" \\xA0\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"D\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"e\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"v\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"e\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"l\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"o\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"p\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"e\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"r\"))), React.createElement(\"button\", {\n        id: \"scroll-btn\",\n        type: \"button\",\n        title: \"Learn More About Adam\",\n        onClick: () => this.scrollToAbout(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(About, {\n        toggleModal: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(Projects, {\n        toggleModal: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        scrollToTop: this.scrollToTop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/carpenters/portfolio/new-portfolio/src/app/components/App.js"],"names":["React","Component","Scroll","Modal","ParticleNodes","ProjectsData","Projects","ProjectDetails","Resume","About","Footer","App","constructor","props","state","modalOpen","projectToDisplay","imageIsReady","setAppElement","toggleModal","bind","scrollToTop","scrollToAbout","scroller","scrollTo","durcation","delay","smooth","animateScroll","projectDetails","find","project","title","name","setState","preventTextSelectionOnDblClick","e","detail","preventDefault","componentDidMount","img","Image","src","require","onload","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import { Route, Switch } from 'react-router-dom';\nimport Scroll from 'react-scroll';\nimport Modal from 'react-modal'\nimport ParticleNodes from './interactiveNodes/particles.js';\n\nimport '../styles/index.css';\nimport ProjectsData from './Projects/Projects-Data.js'\nimport Projects from './Projects/Projects.js'\nimport ProjectDetails from './Projects/ProjectDetails.js';\nimport Resume from './Resume/Resume.js';\nimport About from './About/About.js'\nimport Footer from './Footer/Footer.js'\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      modalOpen: false,\n      projectToDisplay: '',\n      imageIsReady: false\n    };\n    // Doesnt allow aria to read background when modal is open\n    Modal.setAppElement('body');\n    this.toggleModal = this.toggleModal.bind(this);\n    this.scrollToTop = this.scrollToTop.bind(this);\n  }\n\n  scrollToAbout() {\n    Scroll.scroller.scrollTo('about', {\n      durcation: 1000,\n      delay: 250,\n      smooth: true,\n    });\n  }\n\n  scrollToTop() {\n    Scroll.animateScroll.scrollToTop();\n  }\n\n  projectDetails() {\n    if(this.state.projectToDisplay === 'resume'){\n      return (\n        <Modal\n          className='project-modal'\n          isOpen={ this.state.modalOpen }\n          onRequestClose={this.toggleModal}\n          contentLabel='Resume'\n        >\n          <Resume\n            toggleModal={ this.toggleModal }\n          />\n        </Modal>\n      );\n    } else {\n      const projectToDisplay = ProjectsData.find(project =>\n        project.title === this.state.projectToDisplay,\n      );\n      return (\n        <Modal\n          className='project-modal'\n          isOpen={ this.state.modalOpen }\n          onRequestClose={this.toggleModal}\n          contentLabel='Project Details'\n        >\n          <ProjectDetails\n            { ...projectToDisplay }\n            toggleModal={ this.toggleModal }\n          />\n        </Modal>\n      );\n    }\n  }\n\n  toggleModal(name) {\n    if (!this.state.modalOpen) {\n      this.setState({ modalOpen: true, projectToDisplay: name });\n    } else {\n      this.setState({ modalOpen: false, projectToDisplay: '' });\n    }\n  }\n\n  preventTextSelectionOnDblClick(e) {\n    if (e.detail > 1) {\n      e.preventDefault();\n     }\n  }\n\n  componentDidMount() {\n    const img = new Image();\n    img.src = require('../styles/images/new-background-trees1.png'); // by setting an src, you trigger browser download\n\n    img.onload = () => {\n      // when it finishes loading, update the component state\n      this.setState({\n        imageIsReady: true\n      });\n    }\n  }\n\n  render() {\n    const { imageIsReady } = this.state;\n    if (!imageIsReady) {\n      return <div className='default-background'></div>; // or just return null if you want nothing to be rendered.\n    } else {\n      return (\n        <div className=\"App\"\n            onMouseDown={ (e) => this.preventTextSelectionOnDblClick(e) }>\n          <ParticleNodes/>\n          <img src={require('../styles/images/new-background-trees1.png')} alt='black sillouette of pine trees as foreground' className='landing-trees'/>\n\n          { this.projectDetails() }\n          <section id='header'>\n            <section id='name'>\n              <h1> adam<span id='period'>.</span>carpenter </h1>\n              <h2 id='title' className='employment-field'>\n                <span>S</span><span>o</span><span>f</span><span>t</span>\n                <span>w</span><span>a</span><span>r</span><span>e</span> &nbsp;\n                <span>D</span><span>e</span><span>v</span><span>e</span><span>l</span><span>o</span>\n                <span>p</span><span>e</span><span>r</span>\n              </h2>\n            </section>\n            <button\n              id='scroll-btn'\n              type='button'\n              title='Learn More About Adam'\n              onClick={ () => this.scrollToAbout() }>\n            </button>\n          </section>\n          <About toggleModal={ this.toggleModal } />\n          <Projects toggleModal={ this.toggleModal } />\n          <Footer scrollToTop={ this.scrollToTop } />\n        </div>\n      );\n    }\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}